1. CLASS AND OBJECT

class Car {
    String brand;
    int speed;

    void showDetails() {
        System.out.println("Brand: " + brand + ", Speed: " + speed);
    }
}

public class Main {
    public static void main(String[] args) {
        Car myCar = new Car();  // Object creation
        myCar.brand = "Toyota";
        myCar.speed = 120;
        myCar.showDetails();
    }
}

2. Encapsulation
class Person {
    private String name;

    public void setName(String name) {  // Setter
        this.name = name;
    }

    public String getName() {  // Getter
        return name;
    }
}

public class Main {
    public static void main(String[] args) {
        Person p = new Person();
        p.setName("John");
        System.out.println(p.getName());
    }
}

3. Inheritance
class Animal {
    void sound() {
        System.out.println("Animals make sounds");
    }
}

class Dog extends Animal {
    void bark() {
        System.out.println("Dog barks");
    }
}

public class Main {
    public static void main(String[] args) {
        Dog d = new Dog();
        d.sound();  // Inherited method
        d.bark();
    }
}

4. Polymorphism

Method Overloading (Compile-time Polymorphism)

class MathOperations {
    int add(int a, int b) {
        return a + b;
    }

    double add(double a, double b) {
        return a + b;
    }
}

public class Main {
    public static void main(String[] args) {
        MathOperations obj = new MathOperations();
        System.out.println(obj.add(5, 10));
        System.out.println(obj.add(5.5, 10.2));
    }
}

Method Overriding (Runtime Polymorphism)

class Parent {
    void show() {
        System.out.println("Parent class method");
    }
}

class Child extends Parent {
    void show() {
        System.out.println("Child class method");
    }
}

public class Main {
    public static void main(String[] args) {
        Parent p = new Child();  // Upcasting
        p.show();  // Calls Child's overridden method
    }
}
5. Abstraction

Abstract Class

abstract class Vehicle {
    abstract void start();  // Abstract method

    void stop() {
        System.out.println("Vehicle stopped");
    }
}

class Car extends Vehicle {
    void start() {
        System.out.println("Car starts with key");
    }
}

public class Main {
    public static void main(String[] args) {
        Vehicle v = new Car();
        v.start();
        v.stop();
    }
}

Interface

interface Animal {
    void makeSound();
}

class Cat implements Animal {
    public void makeSound() {
        System.out.println("Meow");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal a = new Cat();
        a.makeSound();
    }
}

6. Association

class Driver {
    String name;

    Driver(String name) {
        this.name = name;
    }
}

class Bus {
    String brand;
    Driver driver;

    Bus(String brand, Driver driver) {
        this.brand = brand;
        this.driver = driver;
    }

    void showDetails() {
        System.out.println("Bus brand: " + brand + ", Driver name: " + driver.name);
    }
}

public class Main {
    public static void main(String[] args) {
        Driver d = new Driver("John");
        Bus b = new Bus("Volvo", d);
        b.showDetails();
    }
}



### Explanation of the Code (Encapsulation in Java)

This Java program demonstrates **Encapsulation**, which is one of the four main principles of **Object-Oriented Programming (OOP)**. Encapsulation involves **hiding the internal details** of a class and only exposing necessary functionalities through **getter** and **setter** methods.

---

### **Step-by-Step Explanation**

#### **1. Class Declaration**
```java
class Person {
```
- This defines a class named `Person`.
- A **class** is a blueprint for creating objects.

#### **2. Private Instance Variable**
```java
private String name;
```
- Declares a **private** variable `name` of type `String`.
- The `private` access modifier **restricts direct access** to this variable from outside the class.
- This is the key concept of **Encapsulation**â€”hiding the data from direct modification.

#### **3. Setter Method**
```java
public void setName(String name) {  
    this.name = name;
}
```
- This method is called a **setter**.
- It allows controlled modification of the `name` variable.
- `this.name = name;` assigns the method parameter `name` to the instance variable `name`.

#### **4. Getter Method**
```java
public String getName() {  
    return name;
}
```
- This method is called a **getter**.
- It **returns** the value of the `name` variable to the caller.
- Since `name` is `private`, this method is the only way to access its value from outside the class.

---

### **Main Class and Execution**

#### **5. Main Class Declaration**
```java
public class Main {
```
- Defines a `Main` class where execution starts.

#### **6. main Method**
```java
public static void main(String[] args) {
```
- This is the entry point of the Java program.

#### **7. Creating an Object**
```java
Person p = new Person();
```
- Creates an object `p` of the `Person` class.
- The `new` keyword is used to allocate memory for the object.

#### **8. Setting the Value**
```java
p.setName("John");
```
- Calls the `setName` method on `p` and assigns `"John"` to the `name` variable.

#### **9. Getting and Printing the Value**
```java
System.out.println(p.getName());
```
- Calls `getName()` to retrieve the value of `name`.
- Prints `"John"` to the console.

---

### **Final Output**
```
John
```

---

### **Key Takeaways**
1. **Encapsulation** protects the data by making variables `private` and providing `public` getter and setter methods.
2. The **getter (`getName()`)** allows reading the value of `name`.
3. The **setter (`setName()`)** allows modifying the value of `name` with control.
4. Objects must **use these methods** to interact with private data.

This is a standard way of implementing encapsulation in Java, ensuring **data security** and **maintainability**. ðŸš€





